import pygame as pg

_ = False
mini_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, _,_, _, _, _, _, 1],
    [1, _, _, 3, 3, 3, 3, _, _, _, _,2, 2, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _,_, _, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _,_, _, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _,_, _, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _,_, _, 2, _, _, 1],
    [1, _, _, 3, 3, 3, 3, _, _, _, _,_, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _,_, _, _, _, _, 1],
    [1, _, _, _, 4, _, _, _, 4, _, _,_, _, _, _, _, 1],
    [1, _, _, _, 4, _, _, _, 4, _, _,_, _, _, _, _, 1],
    [1, 1, 1, 3, 1, 3, 1, 1, 1, 3, _,_, _, 3, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _,_, _, 3, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _,_, _, 3, 1, 1, 1],
    [1, 1, 3, 1, 1, 1, 1, 1, 1, 3, _,_, _, 3, 1, 1, 1],
    [1, 4, _, _, _, _, _, _, _, _, _,_, _, _, _, _, 1],
    [3, _, _, _, _, _, _, _, _, _, _,_, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _,_, _, _, _, _, 1],
    [1, _, _, 2, _, _, _, _, _, 3, 4, _,_, 4, 3, _, 1],
    [1, _, _, 5, _, _, _, _, _, _, 3, _,_, 3, _, _, 1],
    [1, _, _, 5, _, _, _, _, _, _, 3, _,_, 3, _, _, 1],
    [1, _, _, 2, _, _, _, _, _, _, _, _, _,_, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _,_, _, _, 1],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _,_, _, 1],
    [1, 4, _, _, _, _, _, _, 4, _, _, 4, _, _,_, _, 1],
    [1, 4, _, _, _, _, _, _, 4, _, _, 4, _, _,_, _, 1],
    [1, 1, 3, 3, _, _,_, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1],
    [1, 1, 1, 3, _, _,_, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 4, _, _,_, 4, 3, 3, 3, 3, 3, 3, 3, 3, 1],
    [1, 1, 1, 3, _, _, 3,3, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [3, _, _, _, _, _, _, _,_, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _,_, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _,_, _, _, _, _, _, _, 3],
    [3, _, _, 5, _, _, _, _, 5, _, _, _, 5, _, _, _, 3],
    [3, _, _, 5, _, _, _, _, 5, _, _, _, 5, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [1, 1, 1, 3, _, _, _, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, 3, 3, 3, 3, 3, 3,3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
]


class Map:
    '''This class is used to create the map'''
    def __init__(self, game):
        '''This method is used to initialize the map
        :param game: The game object'''
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.rows = len(self.mini_map)
        self.cols = len(self.mini_map[0])
        self.get_map()


    def get_map(self):
        '''This method is used to get the map
        :return: The map
        :rtype: dict'''
        for j, row in enumerate(self.mini_map):
            # j is the row number
            for i, value in enumerate(row):
                # i is the column number
                if value:
                    # if the value is not 0
                    self.world_map[(i, j)] = value 
                    # add the value to the world map


    def draw(self):
        '''This method is used to draw the map'''
        [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 100), 2)
         for pos in self.world_map] 
        # draw the map